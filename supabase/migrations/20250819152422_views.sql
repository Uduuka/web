create extension if not exists "http" with schema "extensions";


create type "public"."subscription_plan" as enum ('free', 'pro', 'enterprise');

alter table "public"."pricings" drop constraint "pricings_ad_id_key";

alter table "public"."pricings" drop constraint "pricings_mode_check";

alter table "public"."pricings" drop constraint "unique_mode_per_ad";

alter table "public"."ads" drop constraint "ads_store_id_fkey";

drop view if exists "public"."ads_list_view";

drop function if exists "public"."fetch_nearby_ads"(lat double precision, lon double precision);

drop index if exists "public"."pricings_ad_id_key";

drop index if exists "public"."unique_mode_per_ad";

create table "public"."ad_orders" (
    "ad_id" bigint not null,
    "order_id" bigint not null,
    "pricing" bigint not null,
    "quantity" real,
    "created_at" timestamp with time zone not null default now(),
    "units" real
);


alter table "public"."ad_orders" enable row level security;

create table "public"."auth_req_responses" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "res" jsonb
);


alter table "public"."auth_req_responses" enable row level security;

create table "public"."orders" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "status" text not null,
    "buyer_id" uuid,
    "store_id" bigint not null,
    "ammount" double precision not null,
    "discount" double precision,
    "received" double precision
);


alter table "public"."orders" enable row level security;

create table "public"."purchases" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "store_id" bigint not null,
    "keeper_id" uuid not null
);


alter table "public"."purchases" enable row level security;

create table "public"."sales" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "store_id" bigint not null,
    "user_id" uuid not null default auth.uid(),
    "order_id" bigint not null
);


alter table "public"."sales" enable row level security;

alter table "public"."chat_threads" add column "deleted_by" uuid[] default ARRAY[]::uuid[];

alter table "public"."pricings" drop column "mode";

alter table "public"."profiles" add column "default_address" text;

alter table "public"."profiles" alter column "user_id" set default auth.uid();

alter table "public"."stores" drop column "welcome_note";

alter table "public"."stores" add column "address" text;

alter table "public"."stores" add column "location" geometry;

alter table "public"."stores" add column "slug" text;

alter table "public"."subscriptions" alter column "plan" drop default;

alter table "public"."subscriptions" alter column "plan" set data type subscription_plan using "plan"::subscription_plan;

CREATE UNIQUE INDEX ad_orders_pkey ON public.ad_orders USING btree (ad_id, order_id);

CREATE UNIQUE INDEX auth_req_responses_pkey ON public.auth_req_responses USING btree (id);

CREATE UNIQUE INDEX orders_pkey ON public.orders USING btree (id);

CREATE UNIQUE INDEX purchases_pkey ON public.purchases USING btree (id);

CREATE UNIQUE INDEX sales_pkey ON public.sales USING btree (id);

alter table "public"."ad_orders" add constraint "ad_orders_pkey" PRIMARY KEY using index "ad_orders_pkey";

alter table "public"."auth_req_responses" add constraint "auth_req_responses_pkey" PRIMARY KEY using index "auth_req_responses_pkey";

alter table "public"."orders" add constraint "orders_pkey" PRIMARY KEY using index "orders_pkey";

alter table "public"."purchases" add constraint "purchases_pkey" PRIMARY KEY using index "purchases_pkey";

alter table "public"."sales" add constraint "sales_pkey" PRIMARY KEY using index "sales_pkey";

alter table "public"."ad_orders" add constraint "ad_orders_ad_id_fkey" FOREIGN KEY (ad_id) REFERENCES ads(id) not valid;

alter table "public"."ad_orders" validate constraint "ad_orders_ad_id_fkey";

alter table "public"."ad_orders" add constraint "ad_orders_order_id_fkey" FOREIGN KEY (order_id) REFERENCES orders(id) not valid;

alter table "public"."ad_orders" validate constraint "ad_orders_order_id_fkey";

alter table "public"."ad_orders" add constraint "ad_orders_pricing_fkey" FOREIGN KEY (pricing) REFERENCES pricings(id) not valid;

alter table "public"."ad_orders" validate constraint "ad_orders_pricing_fkey";

alter table "public"."orders" add constraint "orders_buyer_id_fkey" FOREIGN KEY (buyer_id) REFERENCES auth.users(id) not valid;

alter table "public"."orders" validate constraint "orders_buyer_id_fkey";

alter table "public"."orders" add constraint "orders_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id) not valid;

alter table "public"."orders" validate constraint "orders_store_id_fkey";

alter table "public"."purchases" add constraint "purchases_keeper_id_fkey" FOREIGN KEY (keeper_id) REFERENCES auth.users(id) not valid;

alter table "public"."purchases" validate constraint "purchases_keeper_id_fkey";

alter table "public"."purchases" add constraint "purchases_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id) not valid;

alter table "public"."purchases" validate constraint "purchases_store_id_fkey";

alter table "public"."sales" add constraint "sales_order_id_fkey" FOREIGN KEY (order_id) REFERENCES orders(id) not valid;

alter table "public"."sales" validate constraint "sales_order_id_fkey";

alter table "public"."sales" add constraint "sales_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id) not valid;

alter table "public"."sales" validate constraint "sales_store_id_fkey";

alter table "public"."sales" add constraint "sales_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."sales" validate constraint "sales_user_id_fkey";

alter table "public"."ads" add constraint "ads_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE SET NULL not valid;

alter table "public"."ads" validate constraint "ads_store_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_ad_limit()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  user_plan subscription_plan;
  ad_count INTEGER;
BEGIN
  -- Fetch the active plan for the user
  SELECT plan INTO user_plan
  FROM subscriptions
  WHERE user_id = auth.uid()
  AND expires_at > CURRENT_TIMESTAMP
  LIMIT 1;

  -- If no active plan (NULL), treat as free
  IF user_plan IS NULL THEN
    user_plan := 'free';
  END IF;

  -- Check ad limits based on plan
  CASE user_plan
    WHEN 'free' THEN
      SELECT COUNT(*) INTO ad_count
      FROM ads
      WHERE seller_id = auth.uid();
      IF ad_count >= 5 THEN
        RAISE EXCEPTION 'Usage limit exceeded: Free users can have at most 5 ads.';
      END IF;
    WHEN 'pro', 'enterprise' THEN
      -- No limit for pro and enterprise
    ELSE
      RAISE EXCEPTION 'Unknown plan type: %', user_plan;
  END CASE;

  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.check_store_limit()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  user_plan subscription_plan;
  store_count INTEGER;
BEGIN
  -- Fetch the active plan for the user
  SELECT plan INTO user_plan
  FROM subscriptions
  WHERE user_id = auth.uid()
  AND expires_at > CURRENT_TIMESTAMP
  LIMIT 1;

  -- If no active plan (NULL), treat as free
  IF user_plan IS NULL THEN
    user_plan := 'free';
  END IF;

  -- Get the user stores count
  SELECT COUNT(*) INTO store_count
  FROM stores
  WHERE keeper_id = auth.uid();

  -- Check store limits based on plan
  CASE user_plan
    WHEN 'free' THEN
      IF store_count >= 1 THEN
        RAISE EXCEPTION 'Usage limit exceeded: Free users can have at most 1 store.';
      END IF;
    WHEN 'pro' THEN
      IF store_count >= 5 THEN
        RAISE EXCEPTION 'Usage limit exceeded: Pro users can have at most 5 stores.';
      END IF;
    WHEN 'enterprise' THEN
      -- No limit for enterprise
    ELSE
      RAISE EXCEPTION 'Unknown plan type: %', user_plan;
  END CASE;

  RETURN NEW;
END;
$function$
;

create or replace view "public"."profile_view" as  SELECT p.user_id,
    u.email,
    u.phone,
    p.username,
    p.full_names,
    p.profile_pic,
    p.about,
    p.default_address
   FROM (profiles p
     LEFT JOIN auth.users u ON ((p.user_id = u.id)));


create or replace view "public"."store_data" as  SELECT s.id,
    s.created_at,
    s.deleted_at,
    s.name,
    s.logo,
    s.description,
    s.status,
    s.keeper_id,
    s.address,
    s.location,
    s.slug AS welcome_note,
    ( SELECT count(*) AS count
           FROM ads
          WHERE (ads.store_id = s.id)) AS ads,
    ( SELECT avg(sr.score) AS avg
           FROM store_ratings sr
          WHERE (sr.store_id = s.id)) AS rating,
    ( SELECT count(*) AS count
           FROM store_ratings sr
          WHERE (sr.store_id = s.id)) AS ratings,
    ( SELECT count(*) AS count
           FROM store_likes sr
          WHERE ((sr.store_id = s.id) AND sr.status)) AS likes,
    ( SELECT count(*) AS count
           FROM store_likes sr
          WHERE ((sr.store_id = s.id) AND (NOT sr.status))) AS dis_likes,
    ( SELECT COALESCE((EXISTS ( SELECT 1
                   FROM subscriptions sb
                  WHERE ((sb.user_id = s.keeper_id) AND (CURRENT_TIMESTAMP < sb.expires_at)))), false) AS "coalesce") AS is_member
   FROM stores s;


create or replace view "public"."ads_list_view" as  SELECT a.id,
    a.created_at,
    a.deleted_at,
    a.title,
    a.description,
    a.store_id,
    a.is_new,
    a.is_featured,
    a.location,
    a.seller_id,
    a.specs,
    a.category_id,
    a.sub_category_id,
    ( SELECT json_build_object('id', s.id, 'name', s.name, 'logo', s.logo, 'description', s.description, 'status', s.status, 'keeper_id', s.keeper_id, 'welcome_note', s.slug) AS json_build_object
           FROM stores s
          WHERE (s.id = a.store_id)
         LIMIT 1) AS store,
    ( SELECT json_build_object('id', p.id, 'scheme', p.scheme, 'currency', p.currency, 'details', p.details, 'ad_id', p.ad_id) AS json_build_object
           FROM pricings p
          WHERE (p.ad_id = a.id)
         LIMIT 1) AS pricing,
    ( SELECT json_build_object('id', i.id, 'url', i.url, 'ad_id', i.ad_id) AS json_build_object
           FROM ad_images i
          WHERE (i.ad_id = a.id)
         LIMIT 1) AS image,
    ( SELECT count(*) AS count
           FROM ad_views av
          WHERE (av.ad_id = a.id)) AS views,
    ( SELECT count(*) AS count
           FROM ad_likes al
          WHERE (al.ad_id = a.id)) AS likes,
    ( SELECT avg(ar.score) AS avg
           FROM ad_ratings ar
          WHERE (ar.ad_id = a.id)) AS rating,
    ( SELECT count(*) AS count
           FROM ad_ratings ar
          WHERE (ar.ad_id = a.id)) AS ratings,
    ( SELECT COALESCE(jsonb_agg(jsonb_build_object('id', m.id, 'ad_id', m.ad_id, 'currency', m.currency, 'scheme', m.scheme, 'details', m.details) ORDER BY m.created_at) FILTER (WHERE (m.id IS NOT NULL)), '[]'::jsonb) AS "coalesce"
           FROM pricings m
          WHERE (m.ad_id = a.id)) AS pricings
   FROM ads a
  WHERE ((a.deleted_at IS NULL) AND (a.status = 'active'::text));


create or replace view "public"."chat_threads_view" as  SELECT c.id,
    c.created_at,
    c.deleted_at,
    c.buyer_id,
    c.seller_id,
    ( SELECT json_build_object('user_id', s.user_id, 'username', s.username, 'email', s.email, 'phone', s.phone, 'profile_pic', s.profile_pic, 'full_names', s.full_names, 'about', s.about) AS json_build_object
           FROM users_view s
          WHERE (s.user_id = c.seller_id)
         LIMIT 1) AS seller,
    ( SELECT json_build_object('user_id', b.user_id, 'username', b.username, 'email', b.email, 'phone', b.phone, 'profile_pic', b.profile_pic, 'full_names', b.full_names, 'about', b.about) AS json_build_object
           FROM users_view b
          WHERE (b.user_id = c.buyer_id)
         LIMIT 1) AS buyer,
    ( SELECT COALESCE(jsonb_agg(jsonb_build_object('id', m.id, 'text', m.text, 'sender_id', m.sender_id, 'thread_id', m.thread_id, 'status', m.status, 'created_at', m.created_at, 'deleted_at', m.deleted_at) ORDER BY m.created_at) FILTER (WHERE (m.id IS NOT NULL)), '[]'::jsonb) AS "coalesce"
           FROM chat_messages m
          WHERE (m.thread_id = c.id)) AS messages
   FROM chat_threads c
  WHERE ((c.seller_id = auth.uid()) OR ((c.buyer_id = auth.uid()) AND (NOT (auth.uid() = ANY (c.deleted_by)))));


CREATE OR REPLACE FUNCTION public.fetch_ads_in_view(min_lat double precision, min_lon double precision, max_lat double precision, max_lon double precision)
 RETURNS TABLE(id bigint, title text, description text, category_id text, sub_category_id text, store_id bigint, is_new boolean, is_featured boolean, latitude double precision, longitude double precision, seller_id uuid, pricing json, image json)
 LANGUAGE plpgsql
AS $function$BEGIN
    RETURN QUERY
    SELECT 
        a.id, 
        a.title, 
        a.description, 
        a.category_id, 
        a.sub_category_id, 
        a.store_id, a.is_new, 
        a.is_featured, 
        extensions.st_y(a.location) as latitude, 
        extensions.st_x(a.location) as longitude, 
        a.seller_id, 
        a.pricing, 
        a.pricings,
        a.image
    FROM public.ads_list_view a
    WHERE location && st_setsrid(
      st_makebox2d(
        st_point(min_lon, min_lat),
        st_point(max_lon, max_lat)
      ),
      4326
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.fetch_nearby_ads(lat double precision, lon double precision)
 RETURNS TABLE(id bigint, title text, description text, category_id text, sub_category_id text, store_id bigint, is_new boolean, is_feature boolean, latitude double precision, longitude double precision, seller_id uuid, pricing json, pricings jsonb, image json, views bigint, likes bigint, rating numeric, ratings bigint, store json, distance double precision)
 LANGUAGE plpgsql
AS $function$ BEGIN

    RETURN QUERY
    SELECT
        a.id, 
        a.title, 
        a.description, 
        a.category_id, 
        a.sub_category_id, 
        a.store_id, a.is_new, 
        a.is_featured, 
        st_y(a.location) aslatitude, 
        st_x(a.location) as longitude, 
        a.seller_id, 
        a.pricing, 
        a.pricings,
        a.image,
        a.views,
        a.likes,
        a.rating,
        a.ratings,
        a.store,
        st_distance(a.location::geography, st_makepoint(lon, lat)::geography) as distance
    FROM public.ads_list_view a order by location <-> st_point(lon, lat)::geography;
    END; $function$
;

grant delete on table "public"."ad_orders" to "anon";

grant insert on table "public"."ad_orders" to "anon";

grant references on table "public"."ad_orders" to "anon";

grant select on table "public"."ad_orders" to "anon";

grant trigger on table "public"."ad_orders" to "anon";

grant truncate on table "public"."ad_orders" to "anon";

grant update on table "public"."ad_orders" to "anon";

grant delete on table "public"."ad_orders" to "authenticated";

grant insert on table "public"."ad_orders" to "authenticated";

grant references on table "public"."ad_orders" to "authenticated";

grant select on table "public"."ad_orders" to "authenticated";

grant trigger on table "public"."ad_orders" to "authenticated";

grant truncate on table "public"."ad_orders" to "authenticated";

grant update on table "public"."ad_orders" to "authenticated";

grant delete on table "public"."ad_orders" to "service_role";

grant insert on table "public"."ad_orders" to "service_role";

grant references on table "public"."ad_orders" to "service_role";

grant select on table "public"."ad_orders" to "service_role";

grant trigger on table "public"."ad_orders" to "service_role";

grant truncate on table "public"."ad_orders" to "service_role";

grant update on table "public"."ad_orders" to "service_role";

grant delete on table "public"."auth_req_responses" to "anon";

grant insert on table "public"."auth_req_responses" to "anon";

grant references on table "public"."auth_req_responses" to "anon";

grant select on table "public"."auth_req_responses" to "anon";

grant trigger on table "public"."auth_req_responses" to "anon";

grant truncate on table "public"."auth_req_responses" to "anon";

grant update on table "public"."auth_req_responses" to "anon";

grant delete on table "public"."auth_req_responses" to "authenticated";

grant insert on table "public"."auth_req_responses" to "authenticated";

grant references on table "public"."auth_req_responses" to "authenticated";

grant select on table "public"."auth_req_responses" to "authenticated";

grant trigger on table "public"."auth_req_responses" to "authenticated";

grant truncate on table "public"."auth_req_responses" to "authenticated";

grant update on table "public"."auth_req_responses" to "authenticated";

grant delete on table "public"."auth_req_responses" to "service_role";

grant insert on table "public"."auth_req_responses" to "service_role";

grant references on table "public"."auth_req_responses" to "service_role";

grant select on table "public"."auth_req_responses" to "service_role";

grant trigger on table "public"."auth_req_responses" to "service_role";

grant truncate on table "public"."auth_req_responses" to "service_role";

grant update on table "public"."auth_req_responses" to "service_role";

grant delete on table "public"."orders" to "anon";

grant insert on table "public"."orders" to "anon";

grant references on table "public"."orders" to "anon";

grant select on table "public"."orders" to "anon";

grant trigger on table "public"."orders" to "anon";

grant truncate on table "public"."orders" to "anon";

grant update on table "public"."orders" to "anon";

grant delete on table "public"."orders" to "authenticated";

grant insert on table "public"."orders" to "authenticated";

grant references on table "public"."orders" to "authenticated";

grant select on table "public"."orders" to "authenticated";

grant trigger on table "public"."orders" to "authenticated";

grant truncate on table "public"."orders" to "authenticated";

grant update on table "public"."orders" to "authenticated";

grant delete on table "public"."orders" to "service_role";

grant insert on table "public"."orders" to "service_role";

grant references on table "public"."orders" to "service_role";

grant select on table "public"."orders" to "service_role";

grant trigger on table "public"."orders" to "service_role";

grant truncate on table "public"."orders" to "service_role";

grant update on table "public"."orders" to "service_role";

grant delete on table "public"."purchases" to "anon";

grant insert on table "public"."purchases" to "anon";

grant references on table "public"."purchases" to "anon";

grant select on table "public"."purchases" to "anon";

grant trigger on table "public"."purchases" to "anon";

grant truncate on table "public"."purchases" to "anon";

grant update on table "public"."purchases" to "anon";

grant delete on table "public"."purchases" to "authenticated";

grant insert on table "public"."purchases" to "authenticated";

grant references on table "public"."purchases" to "authenticated";

grant select on table "public"."purchases" to "authenticated";

grant trigger on table "public"."purchases" to "authenticated";

grant truncate on table "public"."purchases" to "authenticated";

grant update on table "public"."purchases" to "authenticated";

grant delete on table "public"."purchases" to "service_role";

grant insert on table "public"."purchases" to "service_role";

grant references on table "public"."purchases" to "service_role";

grant select on table "public"."purchases" to "service_role";

grant trigger on table "public"."purchases" to "service_role";

grant truncate on table "public"."purchases" to "service_role";

grant update on table "public"."purchases" to "service_role";

grant delete on table "public"."sales" to "anon";

grant insert on table "public"."sales" to "anon";

grant references on table "public"."sales" to "anon";

grant select on table "public"."sales" to "anon";

grant trigger on table "public"."sales" to "anon";

grant truncate on table "public"."sales" to "anon";

grant update on table "public"."sales" to "anon";

grant delete on table "public"."sales" to "authenticated";

grant insert on table "public"."sales" to "authenticated";

grant references on table "public"."sales" to "authenticated";

grant select on table "public"."sales" to "authenticated";

grant trigger on table "public"."sales" to "authenticated";

grant truncate on table "public"."sales" to "authenticated";

grant update on table "public"."sales" to "authenticated";

grant delete on table "public"."sales" to "service_role";

grant insert on table "public"."sales" to "service_role";

grant references on table "public"."sales" to "service_role";

grant select on table "public"."sales" to "service_role";

grant trigger on table "public"."sales" to "service_role";

grant truncate on table "public"."sales" to "service_role";

grant update on table "public"."sales" to "service_role";

create policy "Deny direct insert"
on "public"."payement_transactions"
as permissive
for insert
to authenticated
with check (false);


create policy "Enable insert for authenticated users only"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."sales"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."sales"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


CREATE TRIGGER ad_insert_limit BEFORE INSERT ON public.ads FOR EACH ROW EXECUTE FUNCTION check_ad_limit();

CREATE TRIGGER store_insert_limit BEFORE INSERT ON public.stores FOR EACH ROW EXECUTE FUNCTION check_store_limit();


