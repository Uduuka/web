create table "public"."payement_requests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "plan" text not null,
    "months" smallint not null,
    "provider" text not null,
    "phone" text not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."payement_requests" enable row level security;

create table "public"."payement_transactions" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "prid" bigint not null,
    "req_body" jsonb not null,
    "res_body" jsonb,
    "subscr_id" bigint not null
);


alter table "public"."payement_transactions" enable row level security;

create table "public"."subscriptions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "plan" text not null default 'hobby'::text,
    "expires_at" timestamp with time zone
);


alter table "public"."subscriptions" enable row level security;

alter table "public"."base_units" add column "plural" text not null default '""'::text;

alter table "public"."base_units" add column "type" text not null default '""'::text;

alter table "public"."sub_units" alter column "base_unit" drop not null;

alter table "public"."sub_units" alter column "conversion_factor" drop not null;

CREATE UNIQUE INDEX payement_requests_pkey ON public.payement_requests USING btree (id);

CREATE UNIQUE INDEX payement_transactions_pkey ON public.payement_transactions USING btree (id);

CREATE UNIQUE INDEX subscriptions_pkey ON public.subscriptions USING btree (id);

CREATE UNIQUE INDEX subscriptions_user_id_key ON public.subscriptions USING btree (user_id);

alter table "public"."payement_requests" add constraint "payement_requests_pkey" PRIMARY KEY using index "payement_requests_pkey";

alter table "public"."payement_transactions" add constraint "payement_transactions_pkey" PRIMARY KEY using index "payement_transactions_pkey";

alter table "public"."subscriptions" add constraint "subscriptions_pkey" PRIMARY KEY using index "subscriptions_pkey";

alter table "public"."payement_requests" add constraint "payement_requests_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."payement_requests" validate constraint "payement_requests_user_id_fkey";

alter table "public"."payement_transactions" add constraint "payement_transactions_prid_fkey" FOREIGN KEY (prid) REFERENCES payement_requests(id) not valid;

alter table "public"."payement_transactions" validate constraint "payement_transactions_prid_fkey";

alter table "public"."payement_transactions" add constraint "payement_transactions_subscr_id_fkey" FOREIGN KEY (subscr_id) REFERENCES subscriptions(id) not valid;

alter table "public"."payement_transactions" validate constraint "payement_transactions_subscr_id_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_user_id_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_user_id_key" UNIQUE using index "subscriptions_user_id_key";

grant delete on table "public"."payement_requests" to "anon";

grant insert on table "public"."payement_requests" to "anon";

grant references on table "public"."payement_requests" to "anon";

grant select on table "public"."payement_requests" to "anon";

grant trigger on table "public"."payement_requests" to "anon";

grant truncate on table "public"."payement_requests" to "anon";

grant update on table "public"."payement_requests" to "anon";

grant delete on table "public"."payement_requests" to "authenticated";

grant insert on table "public"."payement_requests" to "authenticated";

grant references on table "public"."payement_requests" to "authenticated";

grant select on table "public"."payement_requests" to "authenticated";

grant trigger on table "public"."payement_requests" to "authenticated";

grant truncate on table "public"."payement_requests" to "authenticated";

grant update on table "public"."payement_requests" to "authenticated";

grant delete on table "public"."payement_requests" to "service_role";

grant insert on table "public"."payement_requests" to "service_role";

grant references on table "public"."payement_requests" to "service_role";

grant select on table "public"."payement_requests" to "service_role";

grant trigger on table "public"."payement_requests" to "service_role";

grant truncate on table "public"."payement_requests" to "service_role";

grant update on table "public"."payement_requests" to "service_role";

grant delete on table "public"."payement_transactions" to "anon";

grant insert on table "public"."payement_transactions" to "anon";

grant references on table "public"."payement_transactions" to "anon";

grant select on table "public"."payement_transactions" to "anon";

grant trigger on table "public"."payement_transactions" to "anon";

grant truncate on table "public"."payement_transactions" to "anon";

grant update on table "public"."payement_transactions" to "anon";

grant delete on table "public"."payement_transactions" to "authenticated";

grant insert on table "public"."payement_transactions" to "authenticated";

grant references on table "public"."payement_transactions" to "authenticated";

grant select on table "public"."payement_transactions" to "authenticated";

grant trigger on table "public"."payement_transactions" to "authenticated";

grant truncate on table "public"."payement_transactions" to "authenticated";

grant update on table "public"."payement_transactions" to "authenticated";

grant delete on table "public"."payement_transactions" to "service_role";

grant insert on table "public"."payement_transactions" to "service_role";

grant references on table "public"."payement_transactions" to "service_role";

grant select on table "public"."payement_transactions" to "service_role";

grant trigger on table "public"."payement_transactions" to "service_role";

grant truncate on table "public"."payement_transactions" to "service_role";

grant update on table "public"."payement_transactions" to "service_role";

grant delete on table "public"."subscriptions" to "anon";

grant insert on table "public"."subscriptions" to "anon";

grant references on table "public"."subscriptions" to "anon";

grant select on table "public"."subscriptions" to "anon";

grant trigger on table "public"."subscriptions" to "anon";

grant truncate on table "public"."subscriptions" to "anon";

grant update on table "public"."subscriptions" to "anon";

grant delete on table "public"."subscriptions" to "authenticated";

grant insert on table "public"."subscriptions" to "authenticated";

grant references on table "public"."subscriptions" to "authenticated";

grant select on table "public"."subscriptions" to "authenticated";

grant trigger on table "public"."subscriptions" to "authenticated";

grant truncate on table "public"."subscriptions" to "authenticated";

grant update on table "public"."subscriptions" to "authenticated";

grant delete on table "public"."subscriptions" to "service_role";

grant insert on table "public"."subscriptions" to "service_role";

grant references on table "public"."subscriptions" to "service_role";

grant select on table "public"."subscriptions" to "service_role";

grant trigger on table "public"."subscriptions" to "service_role";

grant truncate on table "public"."subscriptions" to "service_role";

grant update on table "public"."subscriptions" to "service_role";

create policy "Enable read access for all users"
on "public"."base_units"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."payement_requests"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."payement_requests"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."sub_units"
as permissive
for select
to public
using (true);


create policy "Enable users to view their own data only"
on "public"."subscriptions"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



