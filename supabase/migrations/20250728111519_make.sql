drop policy "allow_read_all_chat_threads" on "public"."chat_threads";

alter table "public"."ad_likes" drop constraint "ad_likes_user_id_fkey";

alter table "public"."ad_ratings" drop constraint "ad_ratings_user_id_fkey";

alter table "public"."ads" drop constraint "ads_seller_id_fkey";

alter table "public"."chat_threads" drop constraint "chat_threads_ad_id_fkey";

alter table "public"."chat_threads" drop constraint "chat_threads_buyer_id_fkey";

drop view if exists "public"."ads_list_view";

drop function if exists "public"."fetch_nearby_ads"(lat double precision, lon double precision);

alter table "public"."ad_likes" drop constraint "ad_likes_pkey";

alter table "public"."ad_views" drop constraint "ad_views_pkey";

alter table "public"."store_likes" drop constraint "store_likes_pkey";

drop index if exists "public"."ad_likes_pkey";

drop index if exists "public"."ad_views_pkey";

drop index if exists "public"."store_likes_pkey";

create table "public"."base_units" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "abbr" text
);


alter table "public"."base_units" enable row level security;

create table "public"."profiles" (
    "user_id" uuid not null,
    "username" text not null,
    "full_names" text not null,
    "profile_pic" text,
    "about" text
);


alter table "public"."profiles" enable row level security;

create table "public"."sub_units" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "abbr" text,
    "base_unit" bigint not null,
    "conversion_factor" double precision not null
);


alter table "public"."sub_units" enable row level security;

alter table "public"."ad_images" drop column "id_defualt";

alter table "public"."ad_images" add column "is_default" boolean not null default false;

alter table "public"."ads" add column "address" text;

alter table "public"."ads" add column "quantity" bigint;

alter table "public"."ads" add column "status" text default 'active'::text;

alter table "public"."ads" add column "units" text;

alter table "public"."chat_messages" drop column "message";

alter table "public"."chat_messages" add column "status" text not null default 'sent'::text;

alter table "public"."chat_messages" add column "text" text not null;

alter table "public"."chat_threads" drop column "ad_id";

alter table "public"."chat_threads" add column "seller_id" uuid not null;

alter table "public"."chat_threads" alter column "buyer_id" set not null;

CREATE UNIQUE INDEX base_units_name_key ON public.base_units USING btree (name);

CREATE UNIQUE INDEX base_units_pkey ON public.base_units USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (user_id);

CREATE UNIQUE INDEX profiles_user_id_key ON public.profiles USING btree (user_id);

CREATE UNIQUE INDEX sub_units_name_key ON public.sub_units USING btree (name);

CREATE UNIQUE INDEX sub_units_pkey ON public.sub_units USING btree (id);

CREATE UNIQUE INDEX unique_ad_views_ad_user ON public.ad_views USING btree (ad_id, user_id);

CREATE UNIQUE INDEX unique_buyer_seller_pair ON public.chat_threads USING btree (buyer_id, seller_id);

CREATE UNIQUE INDEX ad_likes_pkey ON public.ad_likes USING btree (ad_id);

CREATE UNIQUE INDEX ad_views_pkey ON public.ad_views USING btree (ad_id);

CREATE UNIQUE INDEX store_likes_pkey ON public.store_likes USING btree (store_id);

alter table "public"."base_units" add constraint "base_units_pkey" PRIMARY KEY using index "base_units_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."sub_units" add constraint "sub_units_pkey" PRIMARY KEY using index "sub_units_pkey";

alter table "public"."ad_likes" add constraint "ad_likes_pkey" PRIMARY KEY using index "ad_likes_pkey";

alter table "public"."ad_views" add constraint "ad_views_pkey" PRIMARY KEY using index "ad_views_pkey";

alter table "public"."store_likes" add constraint "store_likes_pkey" PRIMARY KEY using index "store_likes_pkey";

alter table "public"."ad_likes" add constraint "ad_likes_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."ad_likes" validate constraint "ad_likes_user_id_fkey1";

alter table "public"."ad_ratings" add constraint "ad_ratings_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."ad_ratings" validate constraint "ad_ratings_user_id_fkey1";

alter table "public"."ad_review_replies" add constraint "ad_review_replies_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."ad_review_replies" validate constraint "ad_review_replies_user_id_fkey";

alter table "public"."ad_reviews" add constraint "ad_reviews_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."ad_reviews" validate constraint "ad_reviews_user_id_fkey1";

alter table "public"."ad_views" add constraint "ad_views_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."ad_views" validate constraint "ad_views_user_id_fkey1";

alter table "public"."ad_views" add constraint "unique_ad_views_ad_user" UNIQUE using index "unique_ad_views_ad_user";

alter table "public"."ads" add constraint "ads_seller_id_fkey1" FOREIGN KEY (seller_id) REFERENCES profiles(user_id) not valid;

alter table "public"."ads" validate constraint "ads_seller_id_fkey1";

alter table "public"."base_units" add constraint "base_units_name_key" UNIQUE using index "base_units_name_key";

alter table "public"."chat_messages" add constraint "chat_messages_sender_id_fkey1" FOREIGN KEY (sender_id) REFERENCES profiles(user_id) not valid;

alter table "public"."chat_messages" validate constraint "chat_messages_sender_id_fkey1";

alter table "public"."chat_threads" add constraint "chat_threads_buyer_id_fkey1" FOREIGN KEY (buyer_id) REFERENCES profiles(user_id) not valid;

alter table "public"."chat_threads" validate constraint "chat_threads_buyer_id_fkey1";

alter table "public"."chat_threads" add constraint "chat_threads_seller_id_fkey1" FOREIGN KEY (seller_id) REFERENCES profiles(user_id) not valid;

alter table "public"."chat_threads" validate constraint "chat_threads_seller_id_fkey1";

alter table "public"."chat_threads" add constraint "unique_buyer_seller_pair" UNIQUE using index "unique_buyer_seller_pair";

alter table "public"."profiles" add constraint "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_user_id_key" UNIQUE using index "profiles_user_id_key";

alter table "public"."store_likes" add constraint "store_likes_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."store_likes" validate constraint "store_likes_user_id_fkey1";

alter table "public"."sub_units" add constraint "sub_units_base_unit_fkey" FOREIGN KEY (base_unit) REFERENCES base_units(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."sub_units" validate constraint "sub_units_base_unit_fkey";

alter table "public"."sub_units" add constraint "sub_units_name_key" UNIQUE using index "sub_units_name_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_ad_seller(ad_id text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
DECLARE
  is_seller BOOLEAN;
BEGIN
  -- Query the ads table to check if the current user is the seller
  SELECT EXISTS (
    SELECT 1
    FROM public.ads
    WHERE 
      id::TEXT = ad_id AND 
      seller_id = auth.uid()
  ) INTO is_seller;
  
  RETURN is_seller;
END;
$function$
;

create or replace view "public"."users_view" as  SELECT u.id AS user_id,
    u.email,
    u.phone,
    p.username,
    p.full_names,
    p.profile_pic,
    p.about
   FROM (auth.users u
     LEFT JOIN profiles p ON ((u.id = p.user_id)));


create or replace view "public"."ads_list_view" as  SELECT a.id,
    a.created_at,
    a.deleted_at,
    a.title,
    a.description,
    a.store_id,
    a.is_new,
    a.is_featured,
    a.location,
    a.seller_id,
    a.specs,
    a.category_id,
    a.sub_category_id,
    ( SELECT json_build_object('id', s.id, 'name', s.name, 'logo', s.logo, 'description', s.description, 'status', s.status, 'keeper_id', s.keeper_id, 'welcome_note', s.welcome_note) AS json_build_object
           FROM stores s
          WHERE (s.id = a.store_id)
         LIMIT 1) AS store,
    ( SELECT json_build_object('id', p.id, 'scheme', p.scheme, 'currency', p.currency, 'details', p.details, 'ad_id', p.ad_id) AS json_build_object
           FROM pricings p
          WHERE (p.ad_id = a.id)
         LIMIT 1) AS pricing,
    ( SELECT json_build_object('id', i.id, 'url', i.url, 'ad_id', i.ad_id) AS json_build_object
           FROM ad_images i
          WHERE (i.ad_id = a.id)
         LIMIT 1) AS image,
    ( SELECT count(*) AS count
           FROM ad_views av
          WHERE (av.ad_id = a.id)) AS views,
    ( SELECT count(*) AS count
           FROM ad_likes al
          WHERE (al.ad_id = a.id)) AS likes,
    ( SELECT avg(ar.score) AS avg
           FROM ad_ratings ar
          WHERE (ar.ad_id = a.id)) AS rating,
    ( SELECT count(*) AS count
           FROM ad_ratings ar
          WHERE (ar.ad_id = a.id)) AS ratings
   FROM ads a;


CREATE OR REPLACE FUNCTION public.fetch_nearby_ads(lat double precision, lon double precision)
 RETURNS TABLE(id bigint, title text, description text, category_id text, sub_category_id text, store_id bigint, is_new boolean, is_featured boolean, latitude double precision, longitude double precision, seller_id uuid, pricing json, image json, views bigint, likes bigint, rating numeric, ratings bigint, store json, distance double precision)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT 
        a.id, 
        a.title, 
        a.description, 
        a.category_id, 
        a.sub_category_id, 
        a.store_id, a.is_new, 
        a.is_featured, 
        st_y(a.location) as latitude, 
        st_x(a.location) as longitude, 
        a.seller_id, 
        a.pricing, 
        a.image,
        a.views,
        a.likes,
        a.rating,
        a.ratings,
        a.store,
        st_distance(a.location::geography, st_makepoint(lon, lat)::geography) as distance
    FROM public.ads_list_view a order by location <-> st_point(lon, lat)::geography;
END;
$function$
;

create or replace view "public"."chat_threads_view" as  SELECT c.id,
    c.created_at,
    c.deleted_at,
    c.buyer_id,
    c.seller_id,
    ( SELECT json_build_object('user_id', s.user_id, 'username', s.username, 'email', s.email, 'phone', s.phone, 'profile_pic', s.profile_pic, 'full_names', s.full_names, 'about', s.about) AS json_build_object
           FROM users_view s
          WHERE (s.user_id = c.seller_id)
         LIMIT 1) AS seller,
    ( SELECT json_build_object('user_id', b.user_id, 'username', b.username, 'email', b.email, 'phone', b.phone, 'profile_pic', b.profile_pic, 'full_names', b.full_names, 'about', b.about) AS json_build_object
           FROM users_view b
          WHERE (b.user_id = c.buyer_id)
         LIMIT 1) AS buyer,
    ( SELECT COALESCE(jsonb_agg(jsonb_build_object('id', m.id, 'text', m.text, 'sender_id', m.sender_id, 'thread_id', m.thread_id, 'status', m.status, 'created_at', m.created_at, 'deleted_at', m.deleted_at) ORDER BY m.created_at) FILTER (WHERE (m.id IS NOT NULL)), '[]'::jsonb) AS "coalesce"
           FROM chat_messages m
          WHERE (m.thread_id = c.id)) AS messages
   FROM chat_threads c;


grant delete on table "public"."base_units" to "anon";

grant insert on table "public"."base_units" to "anon";

grant references on table "public"."base_units" to "anon";

grant select on table "public"."base_units" to "anon";

grant trigger on table "public"."base_units" to "anon";

grant truncate on table "public"."base_units" to "anon";

grant update on table "public"."base_units" to "anon";

grant delete on table "public"."base_units" to "authenticated";

grant insert on table "public"."base_units" to "authenticated";

grant references on table "public"."base_units" to "authenticated";

grant select on table "public"."base_units" to "authenticated";

grant trigger on table "public"."base_units" to "authenticated";

grant truncate on table "public"."base_units" to "authenticated";

grant update on table "public"."base_units" to "authenticated";

grant delete on table "public"."base_units" to "service_role";

grant insert on table "public"."base_units" to "service_role";

grant references on table "public"."base_units" to "service_role";

grant select on table "public"."base_units" to "service_role";

grant trigger on table "public"."base_units" to "service_role";

grant truncate on table "public"."base_units" to "service_role";

grant update on table "public"."base_units" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."sub_units" to "anon";

grant insert on table "public"."sub_units" to "anon";

grant references on table "public"."sub_units" to "anon";

grant select on table "public"."sub_units" to "anon";

grant trigger on table "public"."sub_units" to "anon";

grant truncate on table "public"."sub_units" to "anon";

grant update on table "public"."sub_units" to "anon";

grant delete on table "public"."sub_units" to "authenticated";

grant insert on table "public"."sub_units" to "authenticated";

grant references on table "public"."sub_units" to "authenticated";

grant select on table "public"."sub_units" to "authenticated";

grant trigger on table "public"."sub_units" to "authenticated";

grant truncate on table "public"."sub_units" to "authenticated";

grant update on table "public"."sub_units" to "authenticated";

grant delete on table "public"."sub_units" to "service_role";

grant insert on table "public"."sub_units" to "service_role";

grant references on table "public"."sub_units" to "service_role";

grant select on table "public"."sub_units" to "service_role";

grant trigger on table "public"."sub_units" to "service_role";

grant truncate on table "public"."sub_units" to "service_role";

grant update on table "public"."sub_units" to "service_role";

create policy "Enable update for users based on seller_id"
on "public"."ads"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."chat_messages"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."chat_threads"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."chat_threads"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) = seller_id) OR (( SELECT auth.uid() AS uid) = buyer_id)));



